* Method Overloading
    - When a class has more than one method with same name, then there is method overloading
    - Different parameters:
        + Number of parameters: sum(int a, int b) , sum(int a, int b, int c)
        + DataTypes of parameters: sum(int a, int b) , sum (double a, double b)
        + Squence of the parameters: sum(int a, double b), sum(double a, int b)
        + invalid case : return type does not matter for method OVERLOADING (check this when you hear about OVERRIDING)
        Benefits: reusability, clean coding
* Wrapper Classes
        + Why we need? : to use primitives with our Collection framework
        we are wrapping our primitive data (int, double, char) into Object Types: Integer, Double
        Wrapper Classes brings us useful methods : parsInt(String), Character.isAlphabetic()

* ArrayList is part of Collections, and a very useful DATA STRUCTURE
        ArrayList methods:

       add(Object):  adds the elements to the indexes of the arraylist

       add(index, Object): adds the element to the given index (index must be exist)

       get(index): returns the element at given index

       set(index, Object): replaces the old element at given index with new element

       indexOf(Object): returns the first matching object' index number

       size(): returns the total number of elements

       remove(index): removes the object at the given index

       remove(object): removes the first matching object

        				   //  Bulk Op.

        				   // removeAll() : to remove multiple elements

                           // retainAll() : to retain multiple elements

           				   // removeIf()  : removes element according to condition

           				   // containsAll(): checks if all elemnts are contained in the list

           				   // addAll()  :  adds collection of elements to the list

        				   // clear(): removes all the objects from the List

        				   // isEmpty(): returns true if the list contains no element

        			Collections Methods

        			       // sort()    : sort the given collection
        			       // reverse() : reverse the order of the elements in given collection
        			       // max()     : returns the biggest element
        			       // min()     : returns the smallest element
        			       // swap()    : swap the elements in the collection with their indexes
        			       // frequency(c,o):
        			                c – the collection in which to determine the frequency of o
                                    o – the object whose frequency is to be determined
* Class and Object
        Class is BLUEPRINT                   : Instructor     |  Student   ---Attributes and Actions
        Object is an instance of that type   : Oscar, Asya    |  Kenan, Nermin

       FootballTeams --- Class            Player Class
       Fenerbahce    ---- Object          Szalai object

  Constructors: similar to methods, but they are used for creating object (instance) of the blueprint class

  Variable Types:
  - Local VAriables
  - Instance Variables --- belong to object
  - Static Variables --- belong to class