Topics: 1. OOP Polymorphism Continue:
				Reference Type castings
		2. OOP Review

Polymorphism (Many forms): Ability of the objects to take on many forms
			  "IS A relation" is a must

			  Reference type is parent class/interface, and object type is child class

			 *** Reference type decides what can be accessed/called

			  Object type decides which implementation to execute

			    WebDriver driver = new FireFoxDriver();
		  		driver.takeScreenShot();

			  Animal animal = new Tiger();

			  Car car = new Honda();




Dynamic Polymorphism: Method overriding
					 One method with multiple implementations

					 eat():

					 implementation1: liver
					 implementation2: bone
					 implementation3: snake
					 ...

Static Polymorphism: Method overloading
					Multiple methods with same name
					each method has one implementation ONLY

					add(byte, byte)
					add(integer, integer)
					add(Decimal, Decimal)


casting: converting one type to another

2 Types of Type castings:

		1. Primitive Type castings: must happen between primitives

				1.1 Implicit primitive type casting: casting smaller primitive type to large primitive type (done Implicitly)

									int a = 100;
									double b = a; // implicit casting


				1.2 Explicit primitive type casting: casting larger primitive type to smaller primitive type (done explicitly)

									long a = 100;
									short b = (short)a; //explicit casting


		2. Reference Type castings: THERE MUST BE INHERITANCE

				2.1 Upcasting: casting sub type to the super type (done Implicitly)

							Car car = new BMW();

				2.2 downcasting: casting super type to sub type (done explicitly)

							Animal animal = new Dog();

							( (Dog)animal ).bark();