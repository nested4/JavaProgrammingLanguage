Topics:
		1. Primitives: int, double, char, boolean
		2. Primitive Type Castings: Implicit vs Explicit
		3. Wrapper class
		4. String
		5. String vs StringBuilder vs StringBuffer
		6. Loops: for & while
		7. Arrays
		8. for each loop
		9. Custom Methods
		10. Method Overloading
		--
		11. Constructor
		12. Class & Objects
		13. Static vs Instance
		14. Import Statements
		15. Access Modifiers
		16. OOP Encapsulations
		17. OOP Inheritance
        18. Method Overriding
        19. Final keyword
        20. OOP Abstraction
        21. Abstract Class vs Interface
        22. OOP Polymorphism
        23. Reference Type Castings: Upcasting vs DownCasting
        24. Exceptions: checked & unchecked
        25. Exception Handling
        26. final vs finally vs finalize
        27. garbage collection & garbage collector
        28. Collections: List, Set, Queue
        29. Iterable & Iterator
        30. Maps


        1. Primitives: byte,short, int, long, float, double
                       char, boolean

        2.Primitive Type Casting : Implicit Explicit

            1. implicit casting: casting smaller primitive type to larger
            2. eplicit casting: casting a larger primitive to smaller


        3. Wrapper Class: the objects that represents the primitives
                          Enables us to use primitive data types in Collections and Maps
                          Also have some useful methods

        4. String:  immutable
                    "KraftTech"
                     012345678

                     Methods: length, charAt, trim, lowercase, uppercase, replace, substring, equals, equalsIgnoreCase
                              split, endswith, startsWith, toCharArr, indexOf, isEmpty...

        5. StringBuilder and StringBuffer
                mutable char sequences
                have reverse() feature
                slower than String

                StringBuilder : Not Synchronized,
                                much faster than StringBuffer

                StringBuffer  : Synchronized

        6.Loops  repeated actions

            for  :if the number of repetition is known
                for( initilization  ; condition ; increment/decrement   ){
                        statements
                }

            while: to repeat unknown number of times
            while(condition){
            statement
            }

            branching statements:
            break   :    exit the loop (switch)
            continue:    jumps to the next iteration of the loop
            return  :    exits the current method

  		7. Arrays  :  Data Structure supporting multiple variables
  		              use when multiple data is needed
  		              fast
  		              has index
  		              supports primitive and nonprimitives
  		              can be multidimensional
  		              size is fixed, cannot be used with unknown number of data


        8. for each loop  : iteration is fixed (from first element to last element)
                            you dont have access to the index numbers, cannot reassign values
                            data structure is needed to use

    	9. Custom Methods : Function
    	                    reusability
    	                    series of code fragments for a specific task

    	                    public static void/abyDataType methodName(){
    	                      code perform the task
    	                    }

    	10. Method Overloading : multiple methods having same name in a class
    	                         Different Parameters
    	                         reusability
    	                         (Static Polymorphism)



